{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///CSV.min.js","webpack:///webpack/bootstrap 38b84b3f8f89dd701c5d","webpack:///./src/parseCSV.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","parse","input","separator","quote","char","nextChar","i","result","rowIndex","columnIndex","inputLength","length","quoteField","Object","defineProperty","value"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,OAAA,SAAAH,GACA,gBAAAC,SACAA,QAAA,IAAAD,IAEAD,EAAA,IAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GAE/BL,EAAOD,QAAUM,EAAoB,IAKhC,SAASL,EAAQD,GAEtB,YErDM,SAASe,GAAMC,EAAOC,EAAWC,GACpC,GAGIC,GAAMC,EAGNC,EANAC,IACK,KAGLC,EAAW,EACXC,EAAc,EAEdC,EAAeT,GAASA,EAAMU,OAAUV,EAAMU,OAAS,EACvDC,GAAa,CAKjB,KAHAV,EAAYA,GAAa,IACzBC,EAAQA,GAAS,IAEZG,EAAI,EAAOI,EAAJJ,EAAiBA,IACzBF,EAAOH,EAAMK,GACbD,EAAWJ,EAAMK,EAAI,GAEjBF,IAASD,GAAUS,EAKnBR,IAASD,GAASS,GAAcP,IAAaF,GAC7CI,EAAOC,GAAUC,IAAgBN,EACjCG,KAIAF,IAASD,IAASS,GACjBP,IAAaH,GAA0B,OAAbG,GAAsBA,EAKxC,OAATD,GAAkBQ,EAQlBR,IAASF,GAAcU,EAM3BL,EAAOC,GAAUC,IAAgBL,GAL7BK,IACAF,EAAOC,GAAUC,GAAe,KAThCD,IACAC,EAAc,EACdF,EAAOC,MACPD,EAAOC,GAAUC,GAAe,IARhCG,GAAa,EAZbA,GAAa,CAiCrB,OAAOL,GFGVM,OAAOC,eAAe7B,EAAS,cAC3B8B,OAAO,IAEX9B,EE1Dee","file":"CSV.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CSV\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CSV\"] = factory();\n\telse\n\t\troot[\"CSV\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CSV\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CSV\"] = factory();\n\telse\n\t\troot[\"CSV\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.parse = parse;\n\t/**\r\n\t * CSV Parser.  Takes a string as input and returns\r\n\t * an array of arrays (for each row).\r\n\t *\r\n\t * @param input String, CSV input\r\n\t * @param separator String, single character used to separate fields.\r\n\t *        Defaults to \",\"\r\n\t * @param quote String, single character used to quote non-simple fields.\r\n\t *        Defaults to \"\\\"\".\r\n\t */\n\tfunction parse(input, separator, quote) {\n\t    var result = [['']],\n\t        char,\n\t        nextChar,\n\t        rowIndex = 0,\n\t        columnIndex = 0,\n\t        i,\n\t        inputLength = input && input.length ? input.length : 0,\n\t        quoteField = false;\n\t\n\t    separator = separator || ',';\n\t    quote = quote || '\"';\n\t\n\t    for (i = 0; i < inputLength; i++) {\n\t        char = input[i];\n\t        nextChar = input[i + 1];\n\t\n\t        if (char === quote && !quoteField) {\n\t            quoteField = true;\n\t            continue;\n\t        }\n\t\n\t        if (char === quote && quoteField && nextChar === quote) {\n\t            result[rowIndex][columnIndex] += quote;\n\t            i++;\n\t            continue;\n\t        }\n\t\n\t        if (char === quote && quoteField && (nextChar === separator || nextChar === '\\n' || !nextChar)) {\n\t            quoteField = false;\n\t            continue;\n\t        }\n\t\n\t        if (char === '\\n' && !quoteField) {\n\t            rowIndex++;\n\t            columnIndex = 0;\n\t            result[rowIndex] = [];\n\t            result[rowIndex][columnIndex] = '';\n\t            continue;\n\t        }\n\t\n\t        if (char === separator && !quoteField) {\n\t            columnIndex++;\n\t            result[rowIndex][columnIndex] = '';\n\t            continue;\n\t        }\n\t\n\t        result[rowIndex][columnIndex] += char;\n\t    }\n\t\n\t    return result;\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** CSV.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 38b84b3f8f89dd701c5d\n **/","/**\r\n * CSV Parser.  Takes a string as input and returns\r\n * an array of arrays (for each row).\r\n *\r\n * @param input String, CSV input\r\n * @param separator String, single character used to separate fields.\r\n *        Defaults to \",\"\r\n * @param quote String, single character used to quote non-simple fields.\r\n *        Defaults to \"\\\"\".\r\n */\r\nexport function parse(input, separator, quote) {\r\n    var result = [\r\n            ['']\r\n        ],\r\n        char, nextChar,\r\n        rowIndex = 0,\r\n        columnIndex = 0,\r\n        i,\r\n        inputLength = (input && input.length) ? input.length : 0,\r\n        quoteField = false;\r\n\r\n    separator = separator || ',';\r\n    quote = quote || '\"';\r\n\r\n    for (i = 0; i < inputLength; i++) {\r\n        char = input[i];\r\n        nextChar = input[i + 1];\r\n\r\n        if (char === quote && !quoteField) {\r\n            quoteField = true;\r\n            continue;\r\n        }\r\n\r\n        if (char === quote && quoteField && nextChar === quote) {\r\n            result[rowIndex][columnIndex] += quote;\r\n            i++;\r\n            continue;\r\n        }\r\n\r\n        if (char === quote && quoteField &&\r\n            (nextChar === separator || nextChar === '\\n' || !nextChar)) {\r\n            quoteField = false;\r\n            continue;\r\n        }\r\n\r\n        if (char === '\\n' && !quoteField) {\r\n            rowIndex++;\r\n            columnIndex = 0;\r\n            result[rowIndex] = [];\r\n            result[rowIndex][columnIndex] = '';\r\n            continue;\r\n        }\r\n\r\n        if (char === separator && !quoteField) {\r\n            columnIndex++;\r\n            result[rowIndex][columnIndex] = '';\r\n            continue;\r\n        }\r\n\r\n        result[rowIndex][columnIndex] += char;\r\n    }\r\n\r\n    return result;\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/parseCSV.js\n **/"],"sourceRoot":""}